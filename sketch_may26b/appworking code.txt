import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Parkinson\'s Tremor Monitor',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: TremorMonitorScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class TremorMonitorScreen extends StatefulWidget {
  const TremorMonitorScreen({super.key});

  @override
  _TremorMonitorScreenState createState() => _TremorMonitorScreenState();
}

class _TremorMonitorScreenState extends State<TremorMonitorScreen> {
  // Firebase configuration
  final String firebaseHost = "https://parkingson-40ec2-default-rtdb.asia-southeast1.firebasedatabase.app/";
  final String deviceId = "ESP32_723b015c";
  
  // Timers
  Timer? alertCheckTimer;
  Timer? regularDataTimer;
  Timer? alertExpiryTimer;
  
  // Connection state
  bool isFirebaseConnected = false;
  bool hasInitialized = false;
  String connectionStatus = "Initializing...";
  
  // Data variables
  bool isHighTremor = false;
  DateTime? lastHighTremorTime;
  DateTime? lastDataUpdateTime;
  
  // Tremor data
  double dominantFrequency = 0.0;
  double tremorAmplitude = 0.0;
  double rhythmicity = 0.0;
  double harmonicRatio = 0.0;
  bool isRestTremor = false;
  bool isPosturalTremor = false;
  String tremorType = "NONE";
  
  // Alert data
  String alertTimestamp = "";
  String currentAlertKey = "";
  String lastProcessedAlertKey = "";
  bool hasNewAlert = false;
  int currentAlertUnixTime = 0;
  
  // Alert history for better tracking
  Map<String, dynamic> alertHistory = {};
  
  // Status
  String lastUpdateTime = "";
  int alertCheckCount = 0;
  int dataUpdateCount = 0;
  String alertTimeRemaining = "";
  
  @override
  void initState() {
    super.initState();
    initializeFirebase();
  }
  
  @override
  void dispose() {
    alertCheckTimer?.cancel();
    regularDataTimer?.cancel();
    alertExpiryTimer?.cancel();
    super.dispose();
  }
  
  Future<void> initializeFirebase() async {
    try {
      // Test Firebase connection with a simple request
      String testUrl = "$firebaseHost/.json";
      final response = await http.get(Uri.parse(testUrl)).timeout(Duration(seconds: 10));
      
      if (response.statusCode == 200) {
        setState(() {
          isFirebaseConnected = true;
          hasInitialized = true;
          connectionStatus = "Connected - Monitoring";
        });
        
        // Start monitoring only after successful Firebase connection
        startMonitoring();
        print("‚úÖ Firebase initialized successfully");
      } else {
        throw Exception("Firebase returned status: ${response.statusCode}");
      }
    } catch (e) {
      setState(() {
        isFirebaseConnected = false;
        hasInitialized = true;
        connectionStatus = "Connection Failed - Unable to reach Firebase";
      });
      print("‚ùå Firebase initialization failed: $e");
      
      // Retry connection every 30 seconds
      Timer(Duration(seconds: 30), () {
        if (!isFirebaseConnected) {
          initializeFirebase();
        }
      });
    }
  }
  
  void startMonitoring() {
    if (!isFirebaseConnected) return;
    
    // Check for alerts every 1 second (as requested)
    alertCheckTimer = Timer.periodic(Duration(seconds: 1), (timer) {
      if (isFirebaseConnected) {
        checkForAlerts();
      }
    });
    
    // Update regular data every 3 seconds
    regularDataTimer = Timer.periodic(Duration(seconds: 3), (timer) {
      if (isFirebaseConnected) {
        fetchRegularData();
      }
    });
    
    // Timer to update alert time remaining every second
    alertExpiryTimer = Timer.periodic(Duration(seconds: 1), (timer) {
      updateAlertTimeRemaining();
    });
    
    // Initial data fetch
    checkForAlerts();
    fetchRegularData();
  }
  
  void updateAlertTimeRemaining() {
    if (isHighTremor && lastHighTremorTime != null) {
      DateTime now = DateTime.now();
      int minutesElapsed = now.difference(lastHighTremorTime!).inMinutes;
      int minutesRemaining = 15 - minutesElapsed;
      
      if (minutesRemaining > 0) {
        int secondsRemaining = 59 - (now.difference(lastHighTremorTime!).inSeconds % 60);
        setState(() {
          alertTimeRemaining = "${minutesRemaining}m ${secondsRemaining}s remaining";
        });
      } else {
        // Alert has expired
        setState(() {
          isHighTremor = false;
          hasNewAlert = false;
          currentAlertKey = "";
          alertTimeRemaining = "";
          connectionStatus = "Connected - No Active Alerts";
        });
        print("üïê Alert expired after 15 minutes - clearing status");
      }
    }
  }
  
  Future<void> checkForAlerts() async {
    if (!isFirebaseConnected) return;
    
    try {
      alertCheckCount++;
      String alertUrl = "$firebaseHost/alerts/$deviceId.json";
      
      final response = await http.get(Uri.parse(alertUrl)).timeout(Duration(seconds: 5));
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        if (data != null && data is Map && data.isNotEmpty) {
          // Find the most recent alert by timestamp
          String? latestAlertKey;
          int latestTimestamp = 0;
          Map<String, dynamic>? latestAlertData;
          
          data.forEach((key, value) {
            if (value is Map && value['alert_timestamp'] != null) {
              int timestamp = value['alert_timestamp'];
              if (timestamp > latestTimestamp) {
                latestTimestamp = timestamp;
                latestAlertKey = key;
                latestAlertData = Map<String, dynamic>.from(value);
              }
            }
          });
          
          if (latestAlertKey != null && latestAlertData != null) {
            // Convert Unix timestamp to DateTime (your timestamps appear to be in seconds)
            DateTime alertTime = DateTime.fromMillisecondsSinceEpoch(latestTimestamp * 1000);
            DateTime now = DateTime.now();
            
            // Debug print
            print("üîç Latest alert: $latestAlertKey at $alertTime");
            print("üîç Time difference: ${now.difference(alertTime).inMinutes} minutes");
            
            // Check if the alert is within the 15-minute window
            bool isWithin15Minutes = now.difference(alertTime).inMinutes < 15;
            
            if (isWithin15Minutes) {
              // Check if this is a newer alert than what we currently have
              bool isNewerAlert = latestTimestamp > currentAlertUnixTime;
              bool isNewAlertKey = currentAlertKey != latestAlertKey;
              
              setState(() {
                // Always update to the latest alert if it's newer or if no current alert
                if (isNewerAlert || !isHighTremor || isNewAlertKey) {
                  isHighTremor = true;
                  currentAlertKey = latestAlertKey!;
                  currentAlertUnixTime = latestTimestamp;
                  lastHighTremorTime = alertTime;
                  alertTimestamp = latestAlertData!['alert_datetime'] ?? alertTime.toString();
                  
                  // Mark as new alert if it's a different key or newer timestamp
                  hasNewAlert = isNewAlertKey || isNewerAlert;
                  
                  // Update tremor data from the latest alert
                  _updateTremorDataFromSource(latestAlertData!, "ALERT");
                  
                  // Store in alert history
                  alertHistory[latestAlertKey!] = {
                    'data': latestAlertData,
                    'timestamp': alertTime,
                    'processed_at': DateTime.now(),
                  };
                  
                  lastUpdateTime = alertTimestamp;
                  
                  // Update connection status
                  if (hasNewAlert) {
                    connectionStatus = "üö® NEW TREMOR ALERT DETECTED";
                    print("üö® NEW/UPDATED ALERT: $latestAlertKey at $alertTimestamp (timestamp: $latestTimestamp)");
                  } else {
                    connectionStatus = "‚ö†Ô∏è TREMOR ALERT ACTIVE";
                  }
                }
              });
              
              return; // Exit early since we found an active alert
            } else {
              print("üïê Alert found but outside 15-minute window: ${now.difference(alertTime).inMinutes} minutes old");
            }
          }
        }
        
        // No alerts within 15 minutes found - clear alert status if currently active
        if (isHighTremor) {
          setState(() {
            isHighTremor = false;
            hasNewAlert = false;
            currentAlertKey = "";
            currentAlertUnixTime = 0;
            alertTimeRemaining = "";
            connectionStatus = "Connected - No High Tremor Detected";
          });
          print("üïê No recent alerts found - clearing status");
        } else if (!isHighTremor && connectionStatus != "Connected - No High Tremor Detected") {
          setState(() {
            connectionStatus = "Connected - No High Tremor Detected";
          });
        }
        
      } else {
        print("‚ö†Ô∏è Alert check HTTP error: ${response.statusCode}");
      }
      
    } catch (e) {
      print("‚ö†Ô∏è Alert check network error: $e");
      // Don't change connection status on network errors to avoid flickering
    }
  }
  
  Future<void> fetchRegularData() async {
    if (!isFirebaseConnected) return;
    
    try {
      dataUpdateCount++;
      String dataUrl = "$firebaseHost/tremor_data/$deviceId.json";
      
      final response = await http.get(Uri.parse(dataUrl)).timeout(Duration(seconds: 5));
      
      if (response.statusCode == 200) {
        final decoded = json.decode(response.body);
        
        if (decoded != null && decoded is Map) {
          final Map<String, dynamic> data = Map<String, dynamic>.from(decoded);
          
          setState(() {
            lastDataUpdateTime = DateTime.now();
            
            // Only update from regular data if no active alert
            if (!isHighTremor) {
              _updateTremorDataFromSource(data, "REGULAR");
              
              bool pdDetected = data['pd_detected'] == true;
              if (pdDetected) {
                connectionStatus = "üü° Connected - Tremor Detected (Normal Level)";
              } else if (connectionStatus == "Connected - Monitoring") {
                connectionStatus = "Connected - No High Tremor Detected";
              }
              
              lastUpdateTime = data['timestamp_readable'] ?? DateTime.now().toString();
            }
          });
        } else {
          // No regular data available yet - this is normal
          if (!isHighTremor && connectionStatus == "Connected - Monitoring") {
            setState(() {
              connectionStatus = "Connected - Waiting for data";
            });
          }
        }
      } else {
        print("‚ö†Ô∏è Regular data HTTP error: ${response.statusCode}");
      }
      
    } catch (e) {
      print("‚ö†Ô∏è Regular data network error: $e");
    }
  }
  
  void _updateTremorDataFromSource(Map<String, dynamic> data, String source) {
    // Update tremor analysis data
    dominantFrequency = (data['dominant_frequency'] ?? dominantFrequency).toDouble();
    tremorAmplitude = (data['tremor_amplitude'] ?? tremorAmplitude).toDouble();
    rhythmicity = (data['rhythmicity'] ?? rhythmicity).toDouble();
    harmonicRatio = (data['harmonic_ratio'] ?? harmonicRatio).toDouble();
    
    // Update tremor type
    bool newIsRestTremor = data['is_rest_tremor'] ?? false;
    bool newIsPosturalTremor = data['is_postural_tremor'] ?? false;
    
    isRestTremor = newIsRestTremor;
    isPosturalTremor = newIsPosturalTremor;
    
    if (isRestTremor) {
      tremorType = "REST";
    } else if (isPosturalTremor) {
      tremorType = "POSTURAL";
    } else {
      tremorType = "NONE";
    }
    
    print("üìä Updated tremor data from $source - Type: $tremorType, Freq: ${dominantFrequency.toStringAsFixed(1)}Hz, Amplitude: ${tremorAmplitude.toStringAsFixed(3)}");
  }
  
  Color getStatusColor() {
    if (!hasInitialized) return Colors.orange;
    if (!isFirebaseConnected) return Colors.red;
    if (isHighTremor) return hasNewAlert ? Colors.red.shade800 : Colors.red.shade600;
    return Colors.green;
  }
  
  IconData getStatusIcon() {
    if (!hasInitialized) return Icons.hourglass_empty;
    if (!isFirebaseConnected) return Icons.cloud_off;
    if (isHighTremor) return hasNewAlert ? Icons.new_releases : Icons.warning;
    return Icons.check_circle;
  }
  
  String getMainStatusText() {
    if (!hasInitialized) return 'INITIALIZING...';
    if (!isFirebaseConnected) return 'CONNECTION FAILED';
    if (isHighTremor) {
      return hasNewAlert ? 'NEW HIGH TREMOR ALERT!' : 'HIGH TREMOR DETECTED';
    }
    return 'NO HIGH TREMOR DETECTED';
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Parkinson\'s Tremor Monitor'),
        backgroundColor: getStatusColor(),
        elevation: 4,
        actions: [
          if (isHighTremor && hasNewAlert)
            Container(
              margin: EdgeInsets.only(right: 16),
              child: Icon(
                Icons.fiber_new,
                color: Colors.white,
                size: 28,
              ),
            ),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              getStatusColor().withOpacity(0.1),
              Colors.white,
            ],
          ),
        ),
        child: RefreshIndicator(
          onRefresh: () async {
            if (isFirebaseConnected) {
              await Future.wait([
                checkForAlerts(),
                fetchRegularData(),
              ]);
            } else {
              await initializeFirebase();
            }
          },
          child: SingleChildScrollView(
            physics: AlwaysScrollableScrollPhysics(),
            padding: EdgeInsets.all(16.0),
            child: Column(
              children: [
                // Main Status Card with enhanced alert indication
                Card(
                  elevation: isHighTremor ? 12 : 8,
                  child: Container(
                    width: double.infinity,
                    padding: EdgeInsets.all(24.0),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      color: !isFirebaseConnected 
                          ? Colors.red.shade50 
                          : isHighTremor 
                              ? Colors.red.shade50 
                              : Colors.green.shade50,
                      border: isHighTremor && hasNewAlert
                          ? Border.all(color: Colors.red.shade800, width: 3)
                          : null,
                    ),
                    child: Column(
                      children: [
                        // Animated icon for new alerts
                        AnimatedContainer(
                          duration: Duration(milliseconds: 500),
                          child: Icon(
                            getStatusIcon(),
                            size: isHighTremor && hasNewAlert ? 72 : 64,
                            color: getStatusColor(),
                          ),
                        ),
                        SizedBox(height: 16),
                        Text(
                          getMainStatusText(),
                          style: TextStyle(
                            fontSize: isHighTremor && hasNewAlert ? 26 : 24,
                            fontWeight: FontWeight.bold,
                            color: getStatusColor(),
                          ),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 8),
                        Text(
                          connectionStatus,
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.grey.shade600,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        if (isHighTremor && alertTimestamp.isNotEmpty) ...[
                          SizedBox(height: 12),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            decoration: BoxDecoration(
                              color: hasNewAlert ? Colors.red.shade200 : Colors.red.shade100,
                              borderRadius: BorderRadius.circular(20),
                              border: Border.all(
                                color: hasNewAlert ? Colors.red.shade800 : Colors.red.shade300,
                                width: hasNewAlert ? 2 : 1,
                              ),
                            ),
                            child: Column(
                              children: [
                                if (hasNewAlert)
                                  Text(
                                    'üÜï NEW ALERT',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: Colors.red.shade800,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                Text(
                                  'Alert Time: $alertTimestamp',
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.red.shade700,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                if (alertTimeRemaining.isNotEmpty)
                                  Text(
                                    'Display Time: $alertTimeRemaining',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: Colors.red.shade600,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                if (currentAlertKey.isNotEmpty)
                                  Text(
                                    'Alert ID: ${currentAlertKey.length > 20 ? currentAlertKey.substring(currentAlertKey.length - 20) : currentAlertKey}',
                                    style: TextStyle(
                                      fontSize: 10,
                                      color: Colors.red.shade600,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                
                SizedBox(height: 20),
                
                // Tremor Details Card - only show if Firebase is connected
                if (isFirebaseConnected)
                  Card(
                    elevation: 4,
                    child: Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'Tremor Analysis',
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.grey.shade800,
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                decoration: BoxDecoration(
                                  color: isHighTremor ? Colors.red.shade100 : Colors.blue.shade100,
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: Text(
                                  isHighTremor ? 'ALERT DATA' : 'LIVE DATA',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: isHighTremor ? Colors.red.shade700 : Colors.blue.shade700,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 16),
                          
                          _buildDataRow('Frequency', '${dominantFrequency.toStringAsFixed(1)} Hz', 
                              isHighValue: dominantFrequency > 4.0),
                          _buildDataRow('Amplitude', '${tremorAmplitude.toStringAsFixed(3)} m/s¬≤',
                              isHighValue: tremorAmplitude > 0.1),
                          _buildDataRow('Rhythmicity', '${rhythmicity.toStringAsFixed(2)}',
                              isHighValue: rhythmicity > 0.7),
                          _buildDataRow('Harmonic Ratio', '${harmonicRatio.toStringAsFixed(2)}',
                              isHighValue: harmonicRatio > 0.8),
                          _buildDataRow('Tremor Type', tremorType,
                              isHighValue: tremorType != "NONE"),
                          
                          if (lastUpdateTime.isNotEmpty) ...[
                            SizedBox(height: 8),
                            Divider(),
                            Text(
                              'Last Update: $lastUpdateTime',
                              style: TextStyle(
                                fontSize: 12,
                                color: Colors.grey.shade600,
                                fontStyle: FontStyle.italic,
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),
                  ),
                
                SizedBox(height: 20),
                
                // Enhanced Monitoring Information Card
                Card(
                  elevation: 4,
                  child: Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'System Status',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey.shade800,
                          ),
                        ),
                        SizedBox(height: 12),
                        
                        _buildStatusRow('Firebase', isFirebaseConnected ? 'Connected' : 'Disconnected', 
                            Icons.cloud, isFirebaseConnected ? Colors.green : Colors.red),
                        
                        if (isFirebaseConnected) ...[
                          _buildStatusRow('Alert Checks', 'Every 1 second', Icons.security, Colors.blue),
                          _buildStatusRow('Data Updates', 'Every 3 seconds', Icons.refresh, Colors.blue),
                          _buildStatusRow('Alert Display', '15 minutes max', Icons.timer, Colors.blue),
                          _buildStatusRow('Alert History', '${alertHistory.length} total', Icons.history, Colors.blue),
                          
                          if (isHighTremor) ...[
                            SizedBox(height: 8),
                            Divider(),
                            _buildStatusRow('Current Alert', currentAlertKey.isNotEmpty 
                                ? 'ID: ${currentAlertKey.length > 15 ? currentAlertKey.substring(currentAlertKey.length - 15) : currentAlertKey}'
                                : 'Active', Icons.warning, Colors.red),
                            if (alertTimeRemaining.isNotEmpty)
                              _buildStatusRow('Time Remaining', alertTimeRemaining, Icons.hourglass_bottom, Colors.orange),
                          ],
                        ],
                      ],
                    ),
                  ),
                ),
                
                SizedBox(height: 20),
                
                // Enhanced action buttons
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () async {
                          if (isFirebaseConnected) {
                            await Future.wait([
                              checkForAlerts(),
                              fetchRegularData(),
                            ]);
                          } else {
                            await initializeFirebase();
                          }
                        },
                        icon: Icon(isFirebaseConnected ? Icons.refresh : Icons.cloud_sync),
                        label: Text(isFirebaseConnected ? 'Refresh Data' : 'Reconnect'),
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          backgroundColor: getStatusColor(),
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: hasNewAlert ? () {
                          setState(() {
                            hasNewAlert = false;
                            if (isHighTremor) {
                              connectionStatus = "‚ö†Ô∏è HIGH TREMOR DETECTED";
                            }
                          });
                        } : null,
                        icon: Icon(Icons.check),
                        label: Text('Acknowledge'),
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          backgroundColor: hasNewAlert ? Colors.orange : Colors.grey,
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildDataRow(String label, String value, {bool isHighValue = false}) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey.shade700,
            ),
          ),
          Container(
            padding: isHighValue ? EdgeInsets.symmetric(horizontal: 8, vertical: 2) : null,
            decoration: isHighValue ? BoxDecoration(
              color: Colors.orange.shade100,
              borderRadius: BorderRadius.circular(8),
            ) : null,
            child: Text(
              value,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: isHighValue ? Colors.orange.shade800 : Colors.grey.shade800,
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildStatusRow(String label, String value, IconData icon, [Color? color]) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Icon(icon, size: 16, color: color ?? Colors.blue),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              label,
              style: TextStyle(fontSize: 14, color: Colors.grey.shade700),
            ),
          ),
          Text(
            value,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w500,
              color: color ?? Colors.grey.shade600,
            ),
          ),
        ],
      ),
    );
  }
}